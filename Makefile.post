
# for later (add testbed docker instance(s))
# python3 -m pip install
# sudo apt update && sudo apt install python3-pip
# sudo pip install psycopg2-binary

new-docker-host-vm: gen-host-vm-configs
	@echo "### Generating new host vm..."
	@# out with the old
	-multipass delete $(APP_HOST)
	-multipass purge
	
	@# and in with the new
	multipass launch --verbose --cpus $(CPUS) -d $(MP_DISK_SIZE) --name $(APP_HOST) --cloud-init $(HOST_VM_CLOUD_INIT_FILE) $(MP_IMAGE_NAME)
	
	multipass list --verbose
	
	@# finally, mount code repository to finish setup from the new host vm
	multipass mount $(APP_HOME) $(APP_HOST):$(APP_PATH)
	
	@echo "### New host vm complete..."

# dummy target used for testing
x-new-containers:
	echo executing new-containers recipe

new-containers: gen-container-configs
	@echo "### Generating new containers..."
	multipass exec $(APP_HOST) -- $(SUDO) docker-compose --project-name $(APP_NAME) --log-level warning --verbose --file $(CODE_PATH)/$(DOCKER_COMPOSE_FILE) down
	
	$(eval HOST_VM_IP=$(shell multipass list | grep $(APP_HOST) | grep -oE '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b'))
	@echo "HOST_VM_IP is $(HOST_VM_IP)"
	
	if [ $(FORCE_DB_CREATION) -eq 1 ]; then (cd $(TOP)/$(APP_NAME) && $(SUDO) rm -rf db); fi
	multipass exec $(APP_HOST) -- $(SUDO) docker-compose --project-name $(APP_NAME) --log-level warning --verbose --file $(CODE_PATH)/$(DOCKER_COMPOSE_FILE) up --detach --force-recreate
	@# allow db connections from host w/o password
	@#if [ $(FORCE_DB_CREATION) -eq 1 ]; then ($(SUDO) $(SED) -e 's/^host all all all md5/host all all all reject/ $(TOP)/$(APP_NAME)/db/pg_hba.conf); fi
	
	@# set iptables forwarding on local host to expose the container host vm
	@# - can this not be done via the cloud-init file?
	$(SUDO) $(FORWARD_PORT_CMD) -f $(APP_HOST) $(EXTERNAL_INTERFACE) $(SERVICE_PROTO) $(WEB_EXTERNAL_PORT) $(HOST_VM_IP) $(WEB_EXTERNAL_PORT)
	$(SUDO) $(FORWARD_PORT_CMD) -f $(APP_HOST) $(EXTERNAL_INTERFACE) $(SERVICE_PROTO) $(DB_EXTERNAL_PORT) $(HOST_VM_IP) $(DB_EXTERNAL_PORT)
	
	@echo "### New containers complete..."

gen-host-vm-configs: $(HOST_VM_CLOUD_INIT_FILE_TEMPLATE) host-vm-network-config-service
	@echo "### Generating host vm config from templates..."
	$(SED) -E \
	  -e 's/___WEB_EXTERNAL_PORT___/$(WEB_EXTERNAL_PORT)/g' \
	  -e 's/___WEB_INSTANCE_PORT___/$(WEB_INSTANCE_PORT)/g' \
	$(HOST_VM_CLOUD_INIT_FILE_TEMPLATE) > $(HOST_VM_CLOUD_INIT_FILE) 

host-vm-network-config-service: $(HOST_VM_NET_SVC_SRC_DIR)/$(HOST_VM_NET_SVC_DEF) $(HOST_VM_NET_SVC_SRC_DIR)/$(HOST_VM_NET_SVC_EXEC)
	@# install service to expose host vm services through legacy iptables rules
	@$(SUDO) $(INSTALL) --mode 0644 $(HOST_VM_NET_SVC_SRC_DIR)/$(HOST_VM_NET_SVC_DEF) $(SYSTEMD_SVC_DIR)
	@$(SUDO) $(INSTALL) --mode 0755 $(HOST_VM_NET_SVC_SRC_DIR)/$(HOST_VM_NET_SVC_EXEC) $(LOCAL_BIN)
	@$(SUDO) systemctl daemon-reload
	@$(SUDO) systemctl enable $(HOST_VM_NET_SVC_DEF)
	@$(SUDO) systemctl start $(HOST_VM_NET_SVC_DEF)

gen-container-configs: $(filter-out $(HOST_VM_CLOUD_INIT_FILE_TEMPLATE), $(wildcard *.tmpl)) $(wildcard test/*.tmpl)
	@echo "### Generating container configs from templates..."
	@# if these substitutions get any more complex, use m4 instead.
	for infile in $^; do                                        \
	    dir=$$(dirname $$infile);                               \
	    outfile=$$(basename --suffix .tmpl $$infile);           \
	    $(SED) -E                                               \
	      -e 's@___WEB_EXTERNAL_PORT___@$(WEB_EXTERNAL_PORT)@g' \
	      -e 's@___WEB_INSTANCE_PORT___@$(WEB_INSTANCE_PORT)@g' \
	      -e 's@___APP_NAME___@$(APP_NAME)@g'                   \
	      -e 's@___APP_PATH___@$(APP_PATH)@g'                   \
	      -e 's@___CODE_PATH___@$(CODE_PATH)@g'                 \
	      -e 's@___DB_PATH___@$(DB_PATH)@g'                     \
	      -e 's@___DB_NAME___@$(DB_NAME)@g'                     \
	      -e 's@___DB_USER___@$(DB_USER)@g'                     \
	      -e 's@___DB_PASSWORD___@$(DB_PASSWORD)@g'             \
	      -e 's@___DB_HOST___@$(APP_SERVICE_IP)@g'                  \
	      -e 's@___DB_EXTERNAL_PORT___@$(DB_EXTERNAL_PORT)@g'   \
	      -e 's@___DB_INSTANCE_PORT___@$(DB_INSTANCE_PORT)@g'   \
	   $$infile > $$dir/$$outfile;                              \
	done

init-db:
	psql --host localhost --port $(DB_EXTERNAL_PORT) --username $(DB_USER) --file $(CODE_PATH)/sql/init.sql

